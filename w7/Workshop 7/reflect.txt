Name:        Amirhossein Sabagh
Student#:    152956199
Email:       asabagh@myseneca.ca
Date:        2020-11-15

This week, I learned how to declare derived and base classes and how to design their relationship. The derived class Truck that I declared inherited the structure of the base class Vehicle; this way, the Truck class has had all the variables and member functions of the base class, except for the special member functions like the constructors, and adds more to it based on its need. I also learned about the 'protected' access level that was of help when dealing with derived and base classes. With the protected access level, the members of the derived class can have access to the private member data and member functions of the base class even though it is normally prohibited to access them outside the scope of their class. Shadowing happens when two member functions in the derived and the base class share the same prototype; when that happens, the derived class's version will mask the base class's version. In this workshop, even though the 'write' and 'read' functions in those two classes shared the same signature, they didn't interfere with each other as they were called from the extraction and insertion operators overload functions and the definition of those functions depended on the passed object; so, if the right operand was of type Vehicle object, the Vehicle class's write/read function would get called.  One thing I came across in this workshop was when I wanted to instantiate an object of type Truck. In order to set the member data that were from the base class, I called the constructor of the base class and passed the values for plate number and year to be set. For the address, I accessed the base class from the derived class and called the moveTo function. At last, I also declared the destructors of Truck and Vehicle classes as virtual because I had no dynamically allocated member data that I wanted to deallocate.