Name:        Amirhossein Sabagh
Student#:    152956199
Email:       asabagh@myseneca.ca
Date:        2020-11-29

This week, I learned why templates are used and how to implement them. The concept of templates is better understood if we get to know what parametric polymorphism means. By saying C++ supports parametric polymorphism, we mean it is a language that the functions we declare in it can be declared so they can handle values without depending on their type. Parametric polymorphism helps us to execute the same code for any type; we do this in C++ by using templates. Using function templates in this workshop helped me to pass different data types as a parameter; this way, I didn't have to write the same code for different data types. An important note that I learned about templates was that in C++, templates need to be instantiated by the compiler before actually compiling them into object code, and therefore we should implement templates only in the header file. The reason for that is when we instantiate a template, the compiler creates a new class and that class contains all the places where we replaced the template argument with the actual type argument. C++ does this automatically and in order to compile the program successfully, the compiler needs to have access to the implementation of those classes before encountering the code that uses template arguments; that's why we implement templates in the header file. Discussed function templates, there also exists the concept of class templates. Class templates are like function templates; they are used when a class wants to define something within its scope that is independent of the data type. Another thing I thing learned this week is that templates can have more than one data type as arguments and we can also define default values for template arguments; we get to learn this matter thoroughly in the upcoming course OOP345.