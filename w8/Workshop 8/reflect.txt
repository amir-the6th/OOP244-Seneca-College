Name:        Amirhossein Sabagh
Student#:    152956199
Email:       asabagh@myseneca.ca
Date:        2020-11-22

In this workshop, I made use of abstract classes, pure virtual functions, and virtual functions. A virtual function is a member function that we declare in our base classes and will override later on in the derived classes. The purpose of the virtual function is to support dynamic dispatch; in our program, virtual functions are called according to the type of the object that they are pointed to, not the type of the pointer object. A pure virtual function is a virtual function that we declare in our abstract base classes and provide no implementations for; we do this by assigning the virtual function to 0. The pure virtual functions and the ABCs act as a portal where we can access the classes from one starting point. Abstract classes are base classes with at least one pure virtual function; their purpose for existence is to be inherited from by the derived classes. As an ABC includes pure virtual functions and may not have any implementations, we cannot create objects of them. The Shape class is an example of an ABC in where we declared the pure virtual functions that we wanted to provide implementations for later on. The Shape class is also considered a pure interface as it doesn't have any data members. With ABCs, we hide our classes from the client code as we only permit the user to access our classes through the pointers of the Shape class. We can make use of arrays and pointers when dealing with abstract base classes. We can declare an array of pointers of the type of our ABC and then point the members to the concrete classes. The type of the ABC is static as it will be introduced during the compile-time, but the type of concrete objects is dynamic as we know them during run time.
